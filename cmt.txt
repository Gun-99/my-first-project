// testtt.cpp : This file contains the 'main' function.Program execution begins and ends there.
//

#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/ml/ml.hpp>
#include <iostream>
#include <sstream>

#define PI 3.14159265

using namespace std;
using namespace cv;

//bien toan cuc
const int CONTOUR_AREA = 150;
const int RESIZED_IMAGE_WIDTH = 20;
const int RESIZED_IMAGE_HEIGHT = 30;

class ContourWithData {
public:
	vector<Point> Contour;
	Rect bdRect;	//bouding rect for each contour
	float fltArea;	//area of contour

	bool checkIfContourIsValid() {
		if (fltArea < CONTOUR_AREA) return false;
		return true;                                            // identifying if a contour is valid !!
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	static bool sortt(const ContourWithData& Left, const ContourWithData& Right) {      // this function allows us to sort
		return(Left.bdRect.x < Right.bdRect.x);                                                   // the contours from left to right
	}
};

bool compareContours(vector<Point> contour1, vector<Point> contour2) {
	double a = fabs(contourArea(Mat(contour1)));
	double b = fabs(contourArea(Mat(contour2)));
	return (a < b);
}

Mat pre_processing(Mat input_image);
int search_corner(Mat, int *corner);
Mat draw_rectangle_contour(Mat);
void cut_type1(int, int, Mat);
Mat rolate(int, int, Mat, Mat);

Mat pre_processing1(Mat img)
{
	Mat gray;
	cvtColor(img, gray, CV_BGR2GRAY);

	Mat blur;
	GaussianBlur(gray, blur, Size(3, 3), 2, 2);

	Mat threshold;
	adaptiveThreshold(blur, threshold, 255, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY_INV, 9, 2);
	imshow("threshold", threshold);

	return threshold;
}

int main()
{
	vector<ContourWithData> AllContourswithdata;	//empty vector
	vector<ContourWithData> validContourswithdata;

	Mat ClassificationInts;	//read the number of classification into this as a vector

	FileStorage fsClassifications("classification.xml", FileStorage::READ);

	if (fsClassifications.isOpened() == false) {
		cout << "error" << endl;
		return 0;
	}
	fsClassifications["classification"] >> ClassificationInts;	//read classifications section into Mat classifications
	fsClassifications.release();


	Mat TrainingImagesAsFlattenedFloats; //read mutiple images into this as a vector
	FileStorage fsTrainingImages("images.xml", FileStorage::READ);          // open the training images file

	if (fsTrainingImages.isOpened() == false) {
		cout << "error" << endl;	// show error message
		return(0);
	}

	fsTrainingImages["images"] >> TrainingImagesAsFlattenedFloats;	// read images section into Mat training images variable
	fsTrainingImages.release();
	// Train!
	Ptr<ml::KNearest>
		KNN(ml::KNearest::create());
	KNN->train(TrainingImagesAsFlattenedFloats, ml::ROW_SAMPLE, ClassificationInts);
	// Test!
	Mat img = imread("anh2.jpg");

	if (img.empty()) {
		cout << "error" << endl;
		return 0;
	}
	
	Mat img_copy = img.clone();
	Mat processed_img = pre_processing(img);
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;
	findContours(processed_img, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
	for (int i = 0; i < contours.size(); i++)
	{
		if (contourArea(contours[i]) > 10000)
		{
			drawContours(img, contours, i, Scalar(0, 255, 0), 1, 8, hierarchy, 0, Point());
			Rect bdRect = boundingRect(contours[i]);
			rectangle(img, bdRect, Scalar(0, 0, 255), 1);
			//imshow("img", img);
		}
	}
	int count = 0;
	int corner[2];
	*corner = search_corner(img, corner);
	int x_corner = corner[0];
	int y_corner = corner[1];
	
	for (int i = 0; i < img.rows; i++)
	{
		Vec3b intensity = img.at<Vec3b>(Point(x_corner + 1, i));
		if (intensity[0] == 0 && intensity[1] == 255 && intensity[2] == 0)
		{
			count++;
		}
	}

	if (count >= 30)
	{
		img_copy = draw_rectangle_contour(img_copy);
		cut_type1(x_corner, y_corner, img_copy);
	}

	else
	{

		img_copy = rolate(x_corner, y_corner, img, img_copy);
		img_copy = draw_rectangle_contour(img_copy);
		int corner[2];
		*corner = search_corner(img_copy, corner);
		int x_corner = corner[0];
		int y_corner = corner[1];
		cut_type1(x_corner, y_corner, img_copy);
	}
	Mat out = imread("output image.jpg");
	if (out.empty())
	{
		cout << "Cannot open image";
		return -1;
	}
	resize(out, out, Size(450, 60));
	//Mat ClassificationInts;
	//Mat TrainingImagesAsFlattenedFloats;float a, b,c,d;
	
	Mat after_pre_processing = pre_processing(out);
	Mat threshold = pre_processing1(out);
	vector<vector<Point>> contour; //khai bao contour vector
	vector<Vec4i> hierachy; //khai bao contour hierachy
	findContours(after_pre_processing,
		contour,
		hierachy,
		RETR_EXTERNAL,                // retrieve the outermost contours only
		CHAIN_APPROX_SIMPLE);         // compress horizontal, vertical, and diagonal segments and le
	for (int i = 0; i < contour.size(); i++) {
		ContourWithData contourWithData;
		contourWithData.Contour = contour[i];
		contourWithData.bdRect = boundingRect(contourWithData.Contour);
		contourWithData.fltArea = contourArea(contourWithData.Contour);
		AllContourswithdata.push_back(contourWithData);
	}

	for (int i = 0; i < AllContourswithdata.size(); i++) {
		if (AllContourswithdata[i].checkIfContourIsValid()) {
			validContourswithdata.push_back(AllContourswithdata[i]);
		}
	}

	sort(validContourswithdata.begin(), validContourswithdata.end(), ContourWithData::sortt);

	string FinalString;		// declare final string

	for (int i = 0; i < validContourswithdata.size(); i++) {            // for each contour

																	// draw a green rect around the current char
		rectangle(out,                            // draw rectangle on original image
			validContourswithdata[i].bdRect,        // rect to draw
			cv::Scalar(0, 255, 0),                        // green
			2);

		Mat ROI = threshold(validContourswithdata[i].bdRect);
		Mat ROIresized;
		resize(ROI, ROIresized, Size(RESIZED_IMAGE_WIDTH, RESIZED_IMAGE_HEIGHT));
		Mat ROIfloat;
		ROIresized.convertTo(ROIfloat, CV_32FC1);	//convert Mat to float
		Mat ROIFlattenedFloat = ROIfloat.reshape(1, 1);	//reshape to call findNearest
		Mat CurrentChar(0, 0, CV_32F);
		KNN->findNearest(ROIFlattenedFloat, 1, CurrentChar);	//call findNearest
		float fltCurrentChar = (float)CurrentChar.at<float>(0, 0);

		FinalString = FinalString + char(int(fltCurrentChar));   // append current char to full string
	}
	cout << "number read = " << FinalString << endl;
	imshow("Testing Number", out);
	waitKey(0);
	return 0;
}

//////////////////////////////////////////////////////////////////////
Mat pre_processing(Mat img)
{
	Mat gray;
	cvtColor(img, gray, CV_BGR2GRAY);
	Mat blur;
	GaussianBlur(gray, blur, Size(3, 3), 2, 2);
	Mat canny;
	Canny(blur, canny, 10, 100, 3, true);
	Mat threshold;
	adaptiveThreshold(canny, threshold, 255, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY_INV, 5, 2);
	return threshold;
}

Mat draw_rectangle_contour(Mat img)
{
	Mat img_copy = img.clone();
	img_copy = pre_processing(img_copy);
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;
	findContours(img_copy, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
	for (int i = 0; i < contours.size(); i++)
	{
		if (contourArea(contours[i]) > 10000)
		{
			//drawContours(img_copy, contours, i, Scalar(0, 255, 0), 1, 8, hierarchy, 0, Point());
			Rect bdRect = boundingRect(contours[i]);
			rectangle(img, bdRect, Scalar(0, 0, 255), 1);
			//imshow("img", img);
		}
	}
	return img;
}

int search_corner(Mat img, int *corner)
{
	corner[0] = 0;
	corner[1] = img.rows / 2;
	for (int i = 0; i < img.cols; i++)
	{
		Vec3b intensity = img.at<Vec3b>(Point(corner[0], corner[1]));
		if (intensity[0] != 0 && intensity[1] != 0 && intensity[2] != 255)
		{
			corner[0]++;
		}
		else
		{
			break;
		}
	}
	for (int i = img.rows / 2; i >= 0; i--)
	{
		Vec3b intensity = img.at<Vec3b>(Point(corner[0], corner[1]));
		if (intensity[0] == 0 && intensity[1] == 0 && intensity[2] == 255)
		{
			corner[1]--;
		}
		else
		{
			break;
		}
	}
	corner[1]++;
	return *corner;
}

void cut_type1(int x, int y, Mat img)
{
	int temp_x = x;
	int temp_y = y;
	int wid = 0, hei = 0;
	for (int i = x; i < img.cols; i++)
	{
		Vec3b intensity = img.at<Vec3b>(Point(temp_x, temp_y));
		if (intensity[0] == 0 && intensity[1] == 0 && intensity[2] == 255)
		{
			wid++;
			temp_x++;
		}
		else
		{
			break;
		}
	}
	for (int i = y; i < img.rows; i++)
	{
		Vec3b intensity = img.at<Vec3b>(Point(temp_x - 1, temp_y));
		if (intensity[0] == 0 && intensity[1] == 0 && intensity[2] == 255)
		{
			hei++;
			temp_y++;
		}
		else
		{
			break;
		}
	}
	Rect crop = Rect(x + 1, y + 1, wid - 2, hei - 2);
	Mat output = img(crop);
	imshow("out1", output);
	//imwrite("out.jpg", output);
	//cout << output.size() << endl;

	float a, b, c, d;
	a = float(264.0 / 366);
	b = float(102.0 / 575);
	c = float(236.0 / 366);
	d = float(32.0 / 575);
	//float a1, b1, c1, d1;
	//a1 = a; b1 = b; c1 = c; d1 = d;
	Rect cut = Rect(a*output.rows, b*output.cols, c*output.rows, d*output.cols);
	Mat cutted = output(cut);
	imshow("cut", cutted);
	imwrite("output image.jpg", cutted);
}
Mat rolate(int x_corner, int y_corner, Mat img, Mat img_copy)
{
	int x_pt1 = x_corner + 15;
	int y_pt1 = 0;
	for (int i = y_corner; i < img.rows; i++)
	{
		Vec3b intensity = img.at<Vec3b>(Point(x_pt1, i));
		{
			if (intensity[0] == 0 && intensity[1] == 255 && intensity[2] == 0)
			{
				y_pt1 = i;
				break;
			}
		}
	}

	//circle(img, Point(x_pt1, y_pt1), 1, Scalar(255, 0, 0), 4, 8);
	int x_pt2 = x_corner;
	int y_pt2 = y_corner + 15;
	for (int i = x_corner; i < img.cols; i++)
	{
		Vec3b intensity = img.at<Vec3b>(Point(i, y_pt2));
		{
			if (intensity[0] == 0 && intensity[1] == 255 && intensity[2] == 0)
			{
				x_pt2 = i;
				break;
			}
		}
	}
	//circle(img, Point(x_pt2, y_pt2), 1, Scalar(255, 0, 0), 4, 8);
	line(img, Point(x_pt1, y_pt1), Point(x_pt2, y_pt2), Scalar(255, 0, 0), 2, 3);
	imshow("img", img);
	double slope = double(abs(y_pt1 - y_pt2)) / abs(x_pt1 - x_pt2);
	if (slope >= 1.0)
	{
		double angle = atan(slope) * 180 / PI;
		cout << angle << endl;
		// get rotation matrix for rotating the image around its center in pixel coordinates
		Point2f center((img.cols - 1) / 2.0, (img.rows - 1) / 2.0);
		Mat rot = getRotationMatrix2D(center, 90.0 - angle, 1.0);
		// determine bounding rectangle, center not relevant
		/*Rect2f bbox = RotatedRect(Point2f(), img.size(), angle).boundingRect2f();
		// adjust transformation matrix
		rot.at<double>(0, 2) += bbox.width / 2.0 - img.cols / 2.0;
		rot.at<double>(1, 2) += bbox.height / 2.0 - img.rows / 2.0;
		*/
		warpAffine(img_copy, img_copy, rot, img.size());
		//imshow("1", out);
	}
	else
	{
		double angle = atan(slope) * 180 / PI;
		cout << angle << endl;
		// get rotation matrix for rotating the image around its center in pixel coordinates
		Point2f center((img.cols - 1) / 2.0, (img.rows - 1) / 2.0);
		Mat rot = getRotationMatrix2D(center, -angle, 1.0);
		// determine bounding rectangle, center not relevant
		/*Rect2f bbox = RotatedRect(Point2f(), img.size(), angle).boundingRect2f();
		// adjust transformation matrix
		rot.at<double>(0, 2) += bbox.width / 2.0 - img.cols / 2.0;
		rot.at<double>(1, 2) += bbox.height / 2.0 - img.rows / 2.0;
		*/
		warpAffine(img_copy, img_copy, rot, img.size());
		//imshow("1", out);
	}
	return img_copy;
}